#!/usr/bin/env ruby

require 'json'
require 'yaml'
require 'socket'
require 'open3'
require 'optparse'

config_file = "powerline_exporter.conf"
config_file=ENV['POWERLINE_EXPORTER_CONFIG'] if ENV.has_key?('POWERLINE_EXPORTER_CONFIG')
OptionParser.new do |parser|
  parser.on("-c", "--config CONFIG", "The config file location") do |v|
    config_file = v
  end
end.parse!

begin
  config = YAML::load_file(config_file)
rescue StandardError => e
  STDERR.puts "Failed to load configuration file: #{e}"
  exit 1
end
unless config.has_key?("exporter") && config["exporter"].has_key?("port")
  STDERR.puts "No port defined"
  exit 1
end
unless config.has_key?("exporter") && config["exporter"].has_key?("verbose")
  config["exporter"]["verbose"] = false
end
unless config.has_key?("exporter") && config["exporter"].has_key?("cache")
  config["exporter"]["cache"] = 10
end

def syscall(*cmd)
  begin
    stdout, stderr, status = Open3.capture3(*cmd)
    status.success? && stdout.slice!(0..-(1 + $/.size)) # strip trailing eol
  rescue
    STDERR.puts "Failed to execute #{cmd}"
  end
end

def faifa_6048(config, station)

  # MAC address: F4:06:8D:7E:05:92
  # Average data rate from STA to DA: 54
  # Average data rate from DA to STA: 37

  results = {}
  input = syscall(config["exporter"]["faifa"], "-i", config['exporter']['interface'], '-a', station, "-t 6048")
  stations = input.scan(/MAC address: ..:..:..:..:..:..\nAverage data rate from STA to DA: .+?\nAverage data rate from DA to STA: .+?\n/).each do |line|
    results[station] = {} unless results.key?(station)
    parsed = line.match(/MAC address: (..:..:..:..:..:..)\nAverage data rate from STA to DA: (.+?)\nAverage data rate from DA to STA: (.+?)\n/)[1..-1]
    results[station].merge!(parsed[0] => { 'tx': parsed[1], 'rx': parsed[2] })
  end
  results
end

def do_query_6048(config)

  stations = {}
  config['stations'].each do |station|
    stations.merge!(faifa_6048(config, station[0]))
  end
  stations
end

def metrics(config)
  results = {}

  queryResults = do_query_6048(config)
  response = ""
  queryResults.each do |station, results|
  	results.each do |da, result|
      [:tx, :rx].each do |label|
        response += "\#HELP #{config['exporter']['prefix']}#{label.to_s} in MBit/s \n"
        response += "\#TYPE #{config['exporter']['prefix']}#{label.to_s} gauge\n"
        response += "#{config['exporter']['prefix']}#{label.to_s}{sta=\"#{config['stations'][station]}\" da=\"#{config['stations'][da]}\"} #{result[label]}\n"
      end
    end
  end
  STDERR.puts response if config["exporter"]["verbose"]
  return response
end

#metrics(config)
#exit

begin
    hostname = config["exporter"].has_key?("host") ? config["exporter"]["host"] : Socket.gethostname
    server = TCPServer.new(config["exporter"]["host"], config["exporter"]["port"])
rescue StandardError => e
  STDERR.puts "Failed to start server: #{e}"
  exit 1
end
requested = Time.now()
cached_response = ""
loop do
  begin
    socket = server.accept
    request = socket.gets
    STDERR.puts request if config["exporter"]["verbose"]
    if request.match("/metrics")
      if Time.now-requested > config["exporter"]["cache"].to_i || cached_response.empty?
        requested = Time.now
        response = metrics(config)
        cached_response = response
      else
        response = cached_response
      end
      socket.print "HTTP/1.1 200 OK\n" +
        "Content-Type: text/plain\n" +
        "Content-Length: #{response.bytesize}\n" +
        "Connection: close\n"
      socket.print "\n"
      socket.print response
    else
      socket.print "HTTP/1.1 404 Not Found\n" +
        "Content-Type: text/plain\n" +
        "Connection: close\n"
      socket.print "\n"
    end
  rescue StandardError => e
    cached_response = ""
    begin
      socket.print "HTTP/1.1 500 Internal Server Error\n" +
        "Content-Type: text/plain\n" +
        "Connection: close\n"
      socket.print "\n"
      socket.print "Server Error\n"
    rescue StandardError => e
      # Captures client disconnect
    end
  end
  socket.close
end